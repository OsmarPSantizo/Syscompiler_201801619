/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,14],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,23],$Vd=[1,24],$Ve=[1,26],$Vf=[1,25],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[5,12,14,15,19,32,33,34,35,36,42,45,48,51,52,55,57,61,63,64,67,69,70],$Vk=[1,49],$Vl=[1,46],$Vm=[1,57],$Vn=[1,45],$Vo=[1,44],$Vp=[1,47],$Vq=[1,48],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,66],$VC=[19,37,47,50],$VD=[1,91],$VE=[1,89],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,90],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[13,38,42,43,46,47,50,62,72,73,74,75,76,77,78,79,80,81,82,83,91],$VT=[13,31,43],$VU=[13,38,42,43,50,62,82,83,91],$VV=[1,162],$VW=[42,43,50],$VX=[13,38,42,43,46,47,50,62,72,73,78,79,80,81,82,83,91],$VY=[13,38,42,43,46,47,50,62,72,73,74,75,78,79,80,81,82,83,91],$VZ=[13,38,42,43,46,47,50,62,72,73,74,75,76,78,79,80,81,82,83,91],$V_=[13,38,42,43,46,47,50,62,78,79,80,81,82,83,91],$V$=[1,194],$V01=[43,50],$V11=[1,224],$V21=[1,223],$V31=[42,61,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"writeline":8,"asignacion":9,"sent_if":10,"sent_while":11,"BREAK":12,"PYC":13,"CONTINUE":14,"RETURN":15,"e":16,"sent_switch":17,"sent_for":18,"ID":19,"DECRE":20,"INCRE":21,"funciones":22,"llamada":23,"startwith":24,"decl_vectores":25,"decl_list_din":26,"agregar_lista":27,"modi_lista":28,"tipo":29,"lista_ids":30,"IGUAL":31,"DOUBLE":32,"INT":33,"STRING":34,"CHAR":35,"BOOLEAN":36,"CORA":37,"CORC":38,"NEW":39,"LLAVA":40,"lista_valores":41,"LLAVC":42,"COMA":43,"modi_vector":44,"DYNAMICLIST":45,"MENORQUE":46,"MAYORQUE":47,"APPEND":48,"PARA":49,"PARC":50,"SETVALUE":51,"WRITELINE":52,"tolower":53,"TOLOWER":54,"IF":55,"ELSE":56,"SWITCH":57,"list_case":58,"default":59,"caso":60,"CASE":61,"DOSPUNTOS":62,"WHILE":63,"FOR":64,"dec_asignacion_for":65,"actualizacion_for":66,"DEFAULT":67,"lista_parametros":68,"VOID":69,"START":70,"WITH":71,"MAS":72,"MENOS":73,"MULTI":74,"DIV":75,"POT":76,"MOD":77,"MAYORIGUAL":78,"MENORIGUAL":79,"IGUALIGUAL":80,"DIFERENTE":81,"AND":82,"OR":83,"NOT":84,"DECIMAL":85,"ENTERO":86,"CADENA":87,"CARACTER":88,"TRUE":89,"FALSE":90,"INTERROGACION":91,"GETVALUE":92,"TOUPPER":93,"TRUNCATE":94,"ROUND":95,"TYPEOF":96,"TOSTRING":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"BREAK",13:"PYC",14:"CONTINUE",15:"RETURN",19:"ID",20:"DECRE",21:"INCRE",31:"IGUAL",32:"DOUBLE",33:"INT",34:"STRING",35:"CHAR",36:"BOOLEAN",37:"CORA",38:"CORC",39:"NEW",40:"LLAVA",42:"LLAVC",43:"COMA",45:"DYNAMICLIST",46:"MENORQUE",47:"MAYORQUE",48:"APPEND",49:"PARA",50:"PARC",51:"SETVALUE",52:"WRITELINE",54:"TOLOWER",55:"IF",56:"ELSE",57:"SWITCH",61:"CASE",62:"DOSPUNTOS",63:"WHILE",64:"FOR",67:"DEFAULT",69:"VOID",70:"START",71:"WITH",72:"MAS",73:"MENOS",74:"MULTI",75:"DIV",76:"POT",77:"MOD",78:"MAYORIGUAL",79:"MENORIGUAL",80:"IGUALIGUAL",81:"DIFERENTE",82:"AND",83:"OR",84:"NOT",85:"DECIMAL",86:"ENTERO",87:"CADENA",88:"CARACTER",89:"TRUE",90:"FALSE",91:"INTERROGACION",92:"GETVALUE",93:"TOUPPER",94:"TRUNCATE",95:"ROUND",96:"TYPEOF",97:"TOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,3],[6,3],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[29,1],[29,1],[29,1],[29,1],[29,1],[25,11],[25,9],[25,7],[41,3],[41,1],[44,7],[26,12],[26,8],[27,7],[28,9],[30,3],[30,1],[8,5],[53,5],[9,4],[10,7],[10,11],[10,9],[17,7],[17,8],[17,7],[58,2],[58,1],[60,4],[11,7],[18,11],[65,4],[65,3],[59,3],[66,2],[66,2],[66,3],[22,8],[22,7],[22,8],[22,7],[68,4],[68,2],[23,4],[23,3],[24,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,2],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,5],[16,2],[16,2],[16,4],[16,4],[16,6],[16,1],[16,1],[16,4],[16,4],[16,4],[16,4],[16,4],[16,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new ast.default($$[$0-1]); return this.$
break;
case 2: case 52:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 35: case 42: case 53:
this.$ = new Array(); this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 13: case 14: case 17:
this.$ = $$[$0];
break;
case 9:
this.$ = new parar.default();
break;
case 10:
this.$ = new continuar.default();
break;
case 11:
this.$ = new retornar.default(null);
break;
case 12:
this.$ = new retornar.default($$[$0-1]);
break;
case 15:
this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new primitivo.default(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 16:
this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new primitivo.default(1,'ENTERO',_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 18: case 19: case 88:
this.$ = $$[$0-1];
break;
case 24:
this.$ = new declaracion.default($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 25:
this.$ = new declaracion.default($$[$0-2],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 26:
this.$ = new tipo.default("DOBLE");
break;
case 27:
this.$ = new tipo.default("ENTERO");
break;
case 28:
this.$ = new tipo.default("CADENA");
break;
case 29:
this.$ = new tipo.default("CARACTER");
break;
case 30:
this.$ = new tipo.default("BOOLEAN");
break;
case 34: case 41:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 43:
this.$ = new writeline.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 44:
this.$ = new tolower.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 45:
this.$ = new asignacion.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 46:
this.$ = new Ifs.default($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 47:
this.$ = new Ifs.default($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 48:
this.$ = new Ifs.default($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 49:
this.$ = new Switch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 50:
this.$ = new Switch.default($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 51:
this.$ = new Switch.default($$[$0-4],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 54:
this.$ = new caso.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 55:
this.$ = new While.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 56:
this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 57:
this.$ = new declaracion.default($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 58:
this.$ = new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 59:
this.$ = new caso.default(null,$$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 60:
this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new primitivo.default(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 61:
this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new primitivo.default(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 62:
this.$ = new asignacion.default($$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 63:
this.$ = new funcion.default(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 64:
this.$ = new funcion.default(2, $$[$0-6], $$[$0-5], [], false, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 65:
this.$ = new funcion.default(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 66:
this.$ = new funcion.default(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 67:
this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null));
break;
case 68:
this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null));
break;
case 69:
this.$ = new llamada.default($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column);
break;
case 70:
this.$ = new llamada.default($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 71:
this.$ = new startwith.default($$[$0],_$[$0-2].first_line, _$[$0-2].last_column);
break;
case 72:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 73:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 74:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 75:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 76:
this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 77:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 78:
this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 79:
this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 80:
this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 81:
this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 82:
this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 83:
this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 84:
this.$ = new logica.default($$[$0-2],'&&', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 85:
this.$ = new logica.default($$[$0-2],'||', $$[$0], _$[$0-2].first_line,_$[$0-2].last_column, false);
break;
case 86:
this.$ = new logica.default($$[$0],'!', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 87:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line,_$[$0-1].last_column, true);
break;
case 89:
this.$ = new primitivo.default(Number($$[$0]),'DOBLE',_$[$0].first_line,_$[$0].last_column);
break;
case 90:
this.$ = new primitivo.default(Number($$[$0]),'ENTERO',_$[$0].first_line,_$[$0].last_column);
break;
case 91:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 92:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new primitivo.default($$[$0],'CADENA',_$[$0].first_line,_$[$0].last_column);
break;
case 93:
$$[$0] = $$[$0].slice(1,$$[$0].length-1);this.$ = new primitivo.default($$[$0],'CARACTER',_$[$0].first_line,_$[$0].last_column);
break;
case 94:
this.$ = new primitivo.default(true,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 95:
this.$ = new primitivo.default(false,'BOOLEAN',_$[$0].first_line,_$[$0].last_column);
break;
case 96:
this.$ = new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 97:
this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new primitivo.default(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false);
break;
case 98:
this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new primitivo.default(1,'ENTERO',_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false);
break;
case 99:
this.$ = new casteos.default($$[$0-2],$$[$0], _$[$0-3].first_line,_$[$0-3].last_column);
break;
case 104:
this.$ = new tolower.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 105:
this.$ = new toupper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 106:
this.$ = new truncate.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 107:
this.$ = new round.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 108:
this.$ = new typeofF.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 109:
this.$ = new tostringg.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{1:[3]},{5:[1,38],6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),{13:[1,40]},{13:[1,41]},{13:[1,42],16:43,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,13]),o($Vj,[2,14]),{20:[1,63],21:[1,64],31:[1,65],49:$VB},o($Vj,[2,17]),{13:[1,67]},{13:[1,68]},o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),{19:[1,70],30:69},{49:[1,71]},{49:[1,72]},{49:[1,73]},{49:[1,74]},{49:[1,75]},{19:[1,76]},{71:[1,77]},{46:[1,78]},{49:[1,79]},{49:[1,80]},o($VC,[2,26]),o($VC,[2,27]),o($VC,[2,28]),o($VC,[2,29]),o($VC,[2,30]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),{13:[1,81],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{16:97,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:98,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:99,19:$Vk,23:55,24:56,29:100,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VS,[2,89]),o($VS,[2,90]),o($VS,[2,91],{20:[1,102],21:[1,101],37:[1,103],49:$VB}),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),{49:[1,104]},o($VS,[2,102]),o($VS,[2,103]),{49:[1,105]},{49:[1,106]},{49:[1,107]},{49:[1,108]},{49:[1,109]},{49:[1,110]},{13:[1,111]},{13:[1,112]},{16:113,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:116,19:$Vk,23:55,24:56,41:114,49:$Vl,50:[1,115],54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,18]),o($Vj,[2,19]),{13:[1,118],31:[1,117],43:[1,119]},o($VT,[2,42],{37:[1,121],49:[1,120]}),{16:122,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:123,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:124,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:125,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{19:[1,128],29:127,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,65:126},{49:[1,129]},{19:[1,131],23:130},{29:132,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},{16:133,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:134,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,12]),{16:135,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:136,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:137,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:138,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:139,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:140,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:141,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:142,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:143,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:144,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:145,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:146,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:147,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:148,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:149,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VU,[2,86],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($VS,[2,87]),{46:$VD,47:$VE,50:[1,150],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{50:[1,151]},o($VS,[2,97]),o($VS,[2,98]),{16:152,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:153,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:154,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:155,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:156,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:157,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:158,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:159,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,15]),o($Vj,[2,16]),{13:[1,160],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{43:$VV,50:[1,161]},o($VS,[2,70]),o($VW,[2,35],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR}),{16:163,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,25]),{19:[1,164]},{29:167,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,50:[1,166],68:165},{38:[1,168]},{46:$VD,47:$VE,50:[1,169],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,170],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,171],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,172],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{13:[1,173]},{19:[1,174]},{31:[1,175]},{29:167,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,50:[1,177],68:176},o($VS,[2,71]),{49:$VB},{47:[1,178]},{43:[1,179],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{43:[1,180],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($VX,[2,72],{74:$VH,75:$VI,76:$VJ,77:$VK}),o($VX,[2,73],{74:$VH,75:$VI,76:$VJ,77:$VK}),o($VY,[2,74],{76:$VJ,77:$VK}),o($VY,[2,75],{76:$VJ,77:$VK}),o($VZ,[2,76],{77:$VK}),o($VZ,[2,77],{77:$VK}),o($V_,[2,78],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($V_,[2,79],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($V_,[2,80],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($V_,[2,81],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($V_,[2,82],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($V_,[2,83],{72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),o($VU,[2,84],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o([13,38,42,43,50,62,83,91],[2,85],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP}),{46:$VD,47:$VE,62:[1,181],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($VS,[2,88]),{16:182,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{38:[1,183],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{43:[1,184],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,185],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,186],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,187],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,188],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,189],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{46:$VD,47:$VE,50:[1,190],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($Vj,[2,45]),o($VS,[2,69]),{16:191,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,192],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($VT,[2,41]),{43:$V$,50:[1,193]},{40:[1,195]},{19:[1,196]},{31:[1,197]},{13:[1,198]},{40:[1,199]},{40:[1,200]},{40:[1,201]},{16:202,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{31:[1,203]},{16:204,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{43:$V$,50:[1,205]},{40:[1,206]},{19:[1,207]},{16:208,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:209,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{16:210,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o([13,38,42,43,50,62,91],[2,99],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ}),o($VS,[2,100]),{16:211,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),o($VW,[2,34],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR}),o($Vj,[2,24]),{40:[1,212]},{29:213,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},o($V01,[2,68]),{16:217,19:$Vk,23:55,24:56,39:[1,215],40:[1,216],49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,43]),{4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{4:219,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{58:220,59:221,60:222,61:$V11,67:$V21},{13:[1,225],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{16:226,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[2,58],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{40:[1,227]},{4:228,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{31:[1,229]},{46:$VD,47:$VE,50:[1,230],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{43:[1,231],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o([13,38,42,43,50,62],[2,96],{46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR}),{46:$VD,47:$VE,50:[1,232],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{19:[1,234]},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,235],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{29:236,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},{16:116,19:$Vk,23:55,24:56,41:237,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,238],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,239],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,240],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{42:[1,241],59:242,60:243,61:$V11,67:$V21},{42:[1,244]},o($V31,[2,53]),{62:[1,245]},{16:246,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{19:[1,248],66:247},{13:[2,57],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{4:249,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,250],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{16:252,19:$Vk,23:55,24:56,39:[1,251],49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,253]},{16:254,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VS,[2,101]),{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,255],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},o($V01,[2,67]),o($Vj,[2,64]),{37:[1,256]},{42:[1,257],43:$VV},o($Vj,[2,33]),o($Vj,[2,46],{56:[1,258]}),o($Vj,[2,55]),o($Vj,[2,49]),{42:[1,259]},o($V31,[2,52]),o($Vj,[2,51]),{4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{46:$VD,47:$VE,62:[1,261],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{50:[1,262]},{20:[1,263],21:[1,264],31:[1,265]},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,266],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},o($Vj,[2,66]),{45:[1,267]},{13:[1,268],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($Vj,[2,39]),{46:$VD,47:$VE,50:[1,269],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($Vj,[2,63]),{16:270,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,271]},{10:273,40:[1,272],55:$Vd},o($Vj,[2,50]),{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[2,59],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{40:[1,275]},{50:[2,60]},{50:[2,61]},{16:276,19:$Vk,23:55,24:56,49:$Vl,54:$Vm,70:$Vi,73:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vj,[2,65]),{46:[1,277]},o($Vj,[2,38]),{13:[1,278]},{38:[1,279],46:$VD,47:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},o($Vj,[2,32]),{4:280,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},o($Vj,[2,48]),o($V31,[2,54],{7:4,8:5,9:6,10:7,11:8,17:12,18:13,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,6:39,12:$V0,14:$V1,15:$V2,19:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi}),{4:281,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{46:$VD,47:$VE,50:[2,62],72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,91:$VR},{29:282,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},o($Vj,[2,40]),{13:[1,283]},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,284],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{6:39,7:4,8:5,9:6,10:7,11:8,12:$V0,14:$V1,15:$V2,17:12,18:13,19:$V3,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,42:[1,285],45:$V9,48:$Va,51:$Vb,52:$Vc,55:$Vd,57:$Ve,63:$Vf,64:$Vg,69:$Vh,70:$Vi},{47:[1,286]},o($Vj,[2,31]),o($Vj,[2,47]),o($Vj,[2,56]),{13:[1,287]},o($Vj,[2,37])],
defaultActions: {38:[2,1],263:[2,60],264:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Interprete/Evaluar');
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');
    
    const relacional = require('../Interprete/Expresiones/Operaciones/Relacionales')
    const logica = require('../Interprete/Expresiones/Operaciones/Logicas')

    const writeline = require('../Interprete/Instrucciones/Writeline');
    const tolower = require('../Interprete/Instrucciones/Tolower');
    const toupper = require('../Interprete/Instrucciones/Toupper');
    const truncate = require('../Interprete/Instrucciones/FuncionesNativas/Truncate');
    const round = require('../Interprete/Instrucciones/FuncionesNativas/Round');
    const typeofF = require('../Interprete/Instrucciones/FuncionesNativas/Typeof');
    const tostringg = require('../Interprete/Instrucciones/FuncionesNativas/Tostring');
    const casteos = require('../Interprete/Instrucciones/FuncionesNativas/Casteos');
    const declaracion = require('../Interprete/Instrucciones/Declaracion');
    const asignacion = require('../Interprete/Instrucciones/Asignacion');
    const Ifs = require('../Interprete/Instrucciones/SentenciasdeControl/Ifs');
    const While = require('../Interprete/Instrucciones/SentenciasCiclicas/While');
    const ast = require('../Interprete/AST/Ast');
    const tipo = require('../Interprete/TablaSimbolos/Tipo');
    const simbolo = require('../Interprete/TablaSimbolos/Simbolo');
    const identificador = require('../Interprete/Expresiones/identificador');
    const ternario = require('../Interprete/Expresiones/Ternario');
    const parar = require('../Interprete/Instrucciones/SentenciadeTransferencia/Break');
    const retornar = require('../Interprete/Instrucciones/SentenciadeTransferencia/Return');
    const continuar = require('../Interprete/Instrucciones/SentenciadeTransferencia/Continue');
    const Switch = require('../Interprete/Instrucciones/SentenciasdeControl/Switch');
    const caso = require('../Interprete/Instrucciones/SentenciasdeControl/caso');
    const For = require('../Interprete/Instrucciones/SentenciasCiclicas/For');
    const funcion = require('../Interprete/Instrucciones/Funcion');
    const llamada = require('../Interprete/Instrucciones/Llamada');
    const startwith = require('../Interprete/Instrucciones/StartWith');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoramos los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lineas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 21 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 20 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 49 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 50 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 13 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 46 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 31:console.log("Reconocio: "+yy_.yytext); return 'EVALUAR'
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 89
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 90
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 33
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 69
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 52
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 93
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 94
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 95
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 96
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 97
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 12
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 45
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 39
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 48
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 51
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 92
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 14
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 15
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 70
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 85
break;
case 65:console.log("Reconocio: "+yy_.yytext); return 86
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 19
break;
case 67:console.log("Reconocio: "+yy_.yytext); return 87
break;
case 68:console.log("Reconocio: "+yy_.yytext); return 88
break;
case 69:/*Espacios se ignoran */ 
break;
case 70:return 5
break;
case 71:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:dynamiclist\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:setvalue\b)/i,/^(?:getvalue\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\nrt]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\nrt]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}